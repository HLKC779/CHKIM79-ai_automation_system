version: '3.8'

services:
  # Main Financial System API
  financial-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///data/financial_system.db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./data:/data
      - ./models:/models
    depends_on:
      - redis
      - rabbitmq
      - postgres
    command: python -m uvicorn backend_integration_guide:api.app --host 0.0.0.0 --port 8000

  # Individual Agent Microservices
  accounting-service:
    build: .
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=accounting
      - DATABASE_URL=sqlite:///data/financial_system.db
    volumes:
      - ./data:/data
    command: python -c "from backend_integration_guide import AgentMicroservice; import uvicorn; service = AgentMicroservice('accounting', 8001); uvicorn.run(service.app, host='0.0.0.0', port=8001)"

  inventory-service:
    build: .
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=inventory
      - DATABASE_URL=sqlite:///data/financial_system.db
    volumes:
      - ./data:/data
    command: python -c "from backend_integration_guide import AgentMicroservice; import uvicorn; service = AgentMicroservice('inventory', 8002); uvicorn.run(service.app, host='0.0.0.0', port=8002)"

  # Message Queue Services
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # PostgreSQL for External Database Integration
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: financial_system
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Nginx as API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - financial-api
      - accounting-service
      - inventory-service

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  # Grafana for Visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  rabbitmq_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: